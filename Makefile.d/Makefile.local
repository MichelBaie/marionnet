# This -*- makefile -*- is part of Marionnet, a virtual network laboratory
# Copyright (C) 2008, 2009  Luca Saiu
# Copyright (C) 2010, 2013, 2018  Jean-Vincent Loddo
# Copyright (C) 2008, 2009, 2010, 2013, 2016  Universit√© Paris 13
# Updated in 2008 by Marco Stronati

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# ---
# NOTE: The files Makefile and Makefile.local may be debugged with:
# make --debug=b,v,i ENTRY
# ---

OCAMLBUILD_OPTIONS= -quiet -Xs uml,ocamlbricks
OCAMLBRICKS_STUBS=ocamlbricks_stubs
COMPILE_OPTIONS += -g -w x -I $(OCAMLBRICKS) -cclib -l$(OCAMLBRICKS_STUBS)
DIRECTORIES_TO_INCLUDE = camlp4 threads inotify lablgtk3 lablglade lablgtk3-sourceview3
# ocamlbricks
LIBRARIES_TO_LINK = unix threads str inotify lablgtk lablglade lablgtksourceview3 ocamlbricks
#C_OBJECTS_TO_LINK +=
EXCLUDE_FROM_SOURCE_FINDING=uml

# OCAMLBRICKS=$(LIBRARYPREFIX)/ocamlbricks
OCAMLBRICKS=$(PWD)/ocamlbricks/_build/_build.flattened
# OCAMLBRICKS=$(PWD)/ocamlbricks/_build/default/
# ocamlbricks.cmxa
# make && dune build --release

# Transmit the information about the compiler version in order to activate conditional compilation:
# Empty for OCaml 3.x.y series, set to "-DOCAML4_02_OR_LATER" for 4.02.y or later:
OCAML4_02_OR_LATER=$(shell if grep -q "^\([5-9]\)\|\(4[.]\([1-9]\|0[2-9]\)\)" <<<"$(OCAML_VERSION)"; then echo "-DOCAML4_02_OR_LATER"; fi)

# Empty for OCaml 3.x.y series, set to "-DOCAML4_04_OR_LATER" for 4.04.y or later:
OCAML4_04_OR_LATER=$(shell if grep -q "^\([5-9]\)\|\(4[.]\([1-9]\|0[4-9]\)\)" <<<"$(OCAML_VERSION)"; then echo "-DOCAML4_04_OR_LATER"; fi)

PP_OPTION = camlp4of $(OCAML4_02_OR_LATER) $(OCAML4_04_OR_LATER) -I $(OCAMLBRICKS) gettext_extract_pot_p4.cmo option_extract_p4.cmo raise_p4.cmo log_module_loading_p4.cmo

OBJECTS_TO_LINK = gtkThread
BYTE_PROGRAMS = marionnet.byte
ROOT_BYTE_PROGRAMS = marionnet-daemon.byte

# Why?
# BYTE_LIBRARY_NAME = marionnet.cma

native: marionnet.native marionnet-daemon.native
byte: marionnet.byte marionnet-daemon.byte

# To do: these should be enabled for release, but they take too long to
# build every time...
NATIVE_PROGRAMS = marionnet.native
ROOT_NATIVE_PROGRAMS = marionnet-daemon.native

ROOT_PROGRAMS = marionnet-daemon.byte marionnet-daemon.native
OTHER_PROGRAMS_TO_INSTALL = scripts/marionnet_telnet.sh

# menu_factory.ml menu_factory.mli are not documented because they
# get ocamldoc (with -pp camlp4of) confused
# UNDOCUMENTED=version.ml gui.ml
UNDOCUMENTED=version.ml

# Before building the main targets we have to create the machine-generated
# sources:
MANUALLY_PRE_COPY_IN_build =     \
  gettext_extract_pot_p4.conf    \
  scripts/can-directory-host-sparse-files.sh

MANUALLY_PRE_MAKE_IN_build =
# MANUALLY_PRE_MAKE_IN_build = ocamlbricks

# A local copy of the ocamlbricks library is built and installed (ocamlbricks/_build) for building marionnet:
_build/ocamlbricks:
	make -C ocamlbricks && touch $@
	mkdir -p _build/ && cd _build && for i in ../ocamlbricks/_build/*.{o,so,cm{i,o}}; do ln -sf $$i; done
	cd ocamlbricks && dune install --prefix $(OCAMLBRICKS)

TEST:
	cd ocamlbricks && dune install --prefix $(OCAMLBRICKS) --dry-run

# marionnet.byte marionnet.native : manually_pre_actions version.ml gui.ml
marionnet.byte marionnet.native : manually_pre_actions version.ml

compile_for_testing:
	@if grep -q "DDOCUMENTATION_OR_DEBUGGING" $(LOGFILE); then echo "Fine, already compiled for testing."; else make clean; fi; \
	make PP_OPTION="$(PP_OPTION) -DDOCUMENTATION_OR_DEBUGGING"

########## Manually generated targets (not through ocamlbuild)

run: marionnet.byte
	(export WORKING=`pwd`; OCAMLRUNPARAM="b" $$WORKING/_build/marionnet.byte) | tee /tmp/LOG

runexam: marionnet.byte
	(export WORKING=`pwd`; OCAMLRUNPARAM="b" $$WORKING/_build/marionnet.byte --exam) | tee /tmp/LOG

runopt: marionnet.native
	(export WORKING=`pwd`; $$WORKING/_build/marionnet.native) | tee /tmp/LOG

run-daemon: marionnet-daemon.byte
	sudo _build/marionnet-daemon.byte

# version.ml is automatically generated:
version.ml: VERSION BUILD-TIME
	@(echo -e "(* This file is automatically generated. Please don't edit it. *)" > $@; \
	echo -e "" >> $@; \
	echo -en "let version = \"" >> $@; \
	for x in `cat VERSION`; do echo -n "$$x" >> $@; done; \
	echo -e "\";;" >> $@; \
	echo -en "let build_time = \"" >> $@; \
	for x in `cat BUILD-TIME`; do echo -n "$$x " >> $@; done; \
	echo -e "\";;" >> $@)

VERSION: META
	@($(call READ_META, name, version); \
	echo "$$version" > $@)

BUILD-TIME:
	@(echo 'built in '`date +"%B %Y"` > $@)

# # # # We need to patch the file generated by Glade, so that image pathnames
# # # # follow our conventions:
# # # share/gui.glade.patched: gui/gui.xml
# # # 	@(cat gui/gui.xml | \
# # # 	sed s/name=\"pixbuf\"\>/name=\"pixbuf\"\>images\\//g | \
# # # 	sed s/name=\"icon\"\>/name=\"icon\"\>images\\//g > $@)

# # # # This is the name of the Glade->OCaml code generator:
# # # GLADE2ML = lablgladecc2

# # # # gui.ml is automatically generated from the patched Glade file:
# # # # gui.ml: share/gui.glade.patched
# # # #     @(cd share; $(GLADE2ML) gui.glade.patched > ../$@)
# # # gui-help: gui.ml
# # # 	ocamlc -i -I +lablgtk2 lablgtk.cma gui.ml | grep -v "val" | grep -v "[0-9]"

# Clean all the automatically-generated sources:
clean-local: clean-mo clean-doc
	@rm -f VERSION BUILD-TIME version.ml;
	@echo "Warning: the local copy of ocamlbricks has not been cleaned up. Use \`make mrproper' to do that."

# @rm -f share/gui.glade.patched gui.ml;


# Clean also the local copy of ocamlbricks:
mrproper: clean
	make -C ocamlbricks clean

# Alias:
clean-ocamlbricks: mrproper

# ==============gettext stuff=============

install-data-local: copy-failsafe-marionnet.conf
install-local: install-mo
uninstall-local: uninstall-mo

copy-failsafe-marionnet.conf:
	cp etc/marionnet.conf share/

_build/marionnet.pot:
	@msgcat -s --use-first $(shell find _build/ -name "*.ml.pot") > $@
	cp $@ po/messages.pot

pot: _build/marionnet.pot
	cp $< po/messages.pot

# main-local: pot
MANUALLY_POST_MAKE_IN_build = marionnet.pot

# Useful to discover widgets containing translatable strings
gui.po: gui/gui.xml
	xml2po $< > /tmp/$@
	@echo "Generated file: /tmp/$@"

# We can take the list of supported languages from po/LINGUAS.
# Notice that this macro is always invoked from the po/ subdirectory:
LANGUAGES = $$( grep -v ^\#.*$$ LINGUAS )

compile-mo:
	@(cd po/; \
	for i in $(call LANGUAGES); \
	do (msgfmt $$i.po && mv messages.mo $$i.mo || exit -1) && \
	echo "Compiled "$$i.mo; \
	done;)

update-po: pot
	@(cd po/; \
	for i in $(call LANGUAGES); \
	do (msgmerge --no-fuzzy-matching -s --update $$i.po messages.pot || exit -1) && \
	echo "Updated "$$i.po; \
	done;)

install-mo: CONFIGME compile-mo
	@($(call READ_CONFIG,localeprefix); \
	cd po/; \
	for i in $(call LANGUAGES); \
	do ((mkdir -p $$localeprefix/$$i/LC_MESSAGES && cp $$i.mo $$localeprefix/$$i/LC_MESSAGES/marionnet.mo) || exit -1) && \
	echo "Installed "$$i; \
	done;)

clean-mo:
	@(cd po/; \
	rm -rf *.mo *~ ;)

uninstall-mo: CONFIGME
	@($(call READ_CONFIG,localeprefix); \
	for i in $(call LANGUAGES); \
	do rm -f $$localeprefix/$$i/LC_MESSAGES/marionnet.mo; \
	echo "Uninstalled "$$i; \
	done;)

######### documentation ##############

#build texinfo developer documentation in one default format
documentation-local: documentation-html-no-split

#build texinfo developer documentation in one all formats
documentation-all: documentation-pdf documentation-html-split documentation-html-no-split

#multi page html output
#the makeinfo command need to be executed in the same directory as img, otherwise it doesn't find any image
documentation-html-split:
	@(cd doc-src; \
	  makeinfo --html --force --no-validate \
	   documentation.texi -o ../doc/documentation/; \
	  cp -r img/ ../doc/documentation/; \
	  cd ..;)

#one page html output
documentation-html-no-split:
	@(cd doc-src; \
	  makeinfo --html --force --no-validate --no-split \
           documentation.texi -o ../doc/documentation.html; \
	  cp -r img/ ../doc/; \
	  cd ..;)

#pdf output
documentation-pdf:
	@(cd doc-src; \
	  texi2dvi --pdf -E --build=local \
	   documentation.texi -o ../doc/documentation.pdf; \
	  rm -f documentation.aux documentation.cp documentation.cps \
	        documentation.fn documentation.ky documentation.log  \
		documentation.pg documentation.toc documentation.tp  \
		documentation.vr;)

clean-doc:
	@(rm -rf doc/* )

#convert and resize images from ps and eps to png
images: dot
	@(mkdir doc/img; \
	  cp doc-src/img/*.png doc/img/; \
	  for i in $$(ls doc-src/img-src/*{ps,eps}); \
          do convert $$i doc/img/$$(basename $${i%.*}.png); \
          done)


# #compile dot sources
dot:
	@(for i in $$(ls doc-src/img-src/*.dot); \
	do dot -Tsvg $$i -o doc-src/img-src/$$(basename $$i .dot).svg; \
           convert -geometry 300x300 -density 150 -antialias doc-src/img-src/$$(basename $$i .dot).svg \
           doc-src/img/$$(basename $$i .dot).png; \
        done; \
        #rm doc-src/img-src/*.svg \
        )
